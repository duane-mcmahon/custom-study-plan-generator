@Styles.Render("~/Scripts/jquery-ui-1.11.4.custom/jquery-ui.theme.min.css")
@Scripts.Render("~/Scripts/Modify.js")
@Scripts.Render("//code.jquery.com/ui/1.11.4/jquery-ui.js")

@using custom_study_plan_generator.MetaObjects

<!--

    Image References:
    Mouse Hover Icon: < Campagnoli, Manuel 2013 “File: Pointing hand cursor vector.svg” Wikimedia Commons (Public Domain), Last Accessed 15 November 2015 https://commons.wikimedia.org/wiki/File:Pointing_hand_cursor_vector.svg >
    All other images: Created by Michael Baggott, 2015, Free to use for commercial or non-commercial purposes, able to distribute and/or modify

-->


<div class="body">
        <div id="backerEdit" class="backerEdit">
            <div id="textEdit" class="textEdit">
                <div class="CPcol1 inline">
                    <div class="inline">
                        @ViewBag.studentID
                        @ViewBag.studentName
                    </div>
                    <div class="inline">

                    </div>
                </div>

                <div class="headingCP pagewideFont inline CPcol2">
                    Create Mode
                </div>

                <div class="CPcol3 inline">
                    <div class="inline">
                        @ViewBag.courseName
                    </div>
                    <div class="inline">

                    </div>
                </div>
                <div class="inline CPcol1desc">
                    @using (Html.BeginForm("Exemptions", "Home", FormMethod.Post))
                    {
                        <button type="submit" class="CPButton" name="back">Back</button>
                    }
                </div>
                <div class="pagewideFont CPcol2desc inline">
                    Make any manual adjustments using the unit swap space, then click "Next". Units left in the swap sapce will not be included in the plan.
                </div>
                <div class="inline CPcol3desc">
                    @using (Html.BeginForm("Final", "Home", FormMethod.Post))
                    {
                        <button type="submit" class="CPButton" name="next" value="next" title="Next Step">Next</button><br />
                        <button id="checkPrereqs" type="button" class="CPButton2" name="checkPrereqs" value="checkPrereqs" title="Check Prerequisites">Check Prerequisites</button><br />
                        <div id="error2" class="errors"></div>
                    }
                </div>

                @{
                    List<CoursePlan> studentPlan = (List<CoursePlan>)Session["StudentPlan"];
                    List<CoursePlan> studentPlanSwap = (List<CoursePlan>)Session["StudentPlanSwap"];
                    List<string> violatedList = (List<string>)ViewBag.violatedList;
                    Int32 numUnits = (Int32)Session["numUnits"];
                }

                <script>

                    var numUnits = '@(Session["numUnits"])';
                    if ('@(studentPlan)' != null) {
                        var studentPlan = JSON.parse('@Html.Raw(Json.Encode(studentPlan))');
                    }
                    if ('@(studentPlanSwap)' != null) {
                        var studentPlanSwap = JSON.parse('@Html.Raw(Json.Encode(studentPlanSwap))');
                    }
                    if ('@(violatedList)' != null) {
                        var violatedListConverted = JSON.parse('@Html.Raw(Json.Encode(violatedList))');
                    }

                </script>

                <!-- Prevents users from being able to go back a page, as this will cause problems with the Session variables -->
                <script type="text/javascript">
                    history.pushState(null, null, 'Modify');
                    window.addEventListener('popstate', function (event) {
                        history.pushState(null, null, 'Modify');
                    });
                </script>

                <div id="planTable" class="planTable">
                    <div class="row1">

                        @{
                            var semesters = numUnits / 4;
                            var header = "";
                        }



                        @for (var h = 1; h <= semesters; h++)
                        {

                            header = "headerPlanTable";
                            if (h == 1)
                            {
                                header = "headerPlanTable" + h;
                            }
                            <div id="topCell" class="inlineGrid planHeader @header">
                                Sem @h
                            </div>
                        }

                    </div>

                    @{

                        var count = 1;
                        var countRow = 2;
                        var countCell = 1;
                        var countCol = 1;
                        string rowClass = "";
                        string idCell = "";
                        string idCont = "";
                        string col = "";

                        for (var x = 1; x <= numUnits; x++)
                        {

                            rowClass = "row" + countRow;
                            idCell = countCell.ToString();
                            idCont = "p" + countCell;


                            if (count % semesters == 1)
                            {
                                @:<div class="@rowClass">
                                                              countCol = 1;
                            }

                            col = "col";
                            if (countCol == 1)
                            {
                                col = "col" + countCol;
                            }

                            <div id="@idCont" class="inlineGrid @col cell lastRow target planCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                            </div>

                            if (count % semesters == 0)
                            {
                                @:</div>
                                countCell = countRow;
                                countRow++;
                            }


                            if (count % semesters != 0)
                            {
                                countCell += 4;
                            }
                            count++;
                            countCol++;
                        }
                    }
                </div>



                <div class="swapSpaceHeader pagewideFont">
                    Unit Swap Space
                </div>
             
                <div class="planTable">
                    <div class="row1">
                        <div id="ss1" class="inlineGrid col1 cell target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss2" class="inlineGrid col cell target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss3" class="inlineGrid col cell target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss4" class="inlineGrid col cell target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss5" class="inlineGrid col cell target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss6" class="inlineGrid col cell target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>

                    </div>
                    <div class="row2">
                        <div id="ss7" class="inlineGrid col1 cell lastRow target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss8" class="inlineGrid col cell lastRow target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss9" class="inlineGrid col cell lastRow target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss10" class="inlineGrid col cell lastRow target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss11" class="inlineGrid col cell lastRow target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>
                        <div id="ss12" class="inlineGrid col cell lastRow target swapSpaceCell" ondragover="allowDrop(event)" ondrop="drop(event, this)">

                        </div>

                    </div>
                    <div id="errors" class="errors"></div>
                </div>

        </div>
    </div>
</div>

